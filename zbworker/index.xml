<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZBWorker on Zeebe Node.js Client Guide</title>
    <link>http://example.org/zbworker/</link>
    <description>Recent content in ZBWorker on Zeebe Node.js Client Guide</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Oct 2019 16:49:55 +1000</lastBuildDate>
    
	<atom:link href="http://example.org/zbworker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ZBWorker class</title>
      <link>http://example.org/zbworker/zbworker/</link>
      <pubDate>Mon, 28 Oct 2019 17:01:15 +1000</pubDate>
      
      <guid>http://example.org/zbworker/zbworker/</guid>
      <description>The ZBWorker is the class used to create Zeebe Job workers. The detailed API documentation is available here.
Your Workflow Definitions contain tasks. A task has a task type.
When you create a workflow instance, the broker will create a job for a task. A job is a specific concrete instance of a task.
An ZBWorker subscribes to the gateway for jobs of a specific task type, and continually polls the gateway for available jobs.</description>
    </item>
    
    <item>
      <title>Worker Overview</title>
      <link>http://example.org/zbworker/overview/</link>
      <pubDate>Sun, 27 Oct 2019 17:01:15 +1000</pubDate>
      
      <guid>http://example.org/zbworker/overview/</guid>
      <description>This section contains conceptual background and reference material that may be overwhelming initially. Feel free to continually refer back to this section as you need to.
The ZBClient method createWorker creates a new ZBWorker to service jobs.
A job is a specific, concrete instance of a task from a running workflow.
A ZBWorker is created for a specific task type, and continuously polls the broker for jobs of that task type.</description>
    </item>
    
    <item>
      <title>Create a Job Worker</title>
      <link>http://example.org/zbworker/create-worker/</link>
      <pubDate>Sat, 26 Oct 2019 17:01:15 +1000</pubDate>
      
      <guid>http://example.org/zbworker/create-worker/</guid>
      <description>To create a Job Worker, you must first create a ZBClient. The ZBClient defines the logging, connection, and retry configuration that will be inherited by any ZBWorkers that it creates.
This allows you to consolidate configuration, and also create various configurations for different scenarios. Refer to the section on the ZBClientfor more information on the ZBClient class.
Create a Job Worker Creating a job worker is simple:
 import { ZBClient } from &amp;#39;zeebe-node&amp;#39; const zbc = new ZBClient() zbc.</description>
    </item>
    
    <item>
      <title>Worker Options</title>
      <link>http://example.org/zbworker/worker-options/</link>
      <pubDate>Sat, 26 Oct 2019 17:01:15 +1000</pubDate>
      
      <guid>http://example.org/zbworker/worker-options/</guid>
      <description>The ZBClient.createWorker() method takes an optional fourth parameter - an options object.
 import { ZBClient } from &amp;#39;zeebe-node&amp;#39; const zbc = new ZBClient() const handler = (job, complete) =&amp;gt; complete.success() zbc.createWorker(null, &amp;#39;get-customer&amp;#39;, handler, { debug: false, failWorkflowOnException: false, maxJobsToActivate: 32, onConnectionErrorHandler: () =&amp;gt; console.log(&amp;#39;Disconnected!&amp;#39;), timeout: 60000 })   const { ZBClient } = require(&amp;#39;zeebe-node&amp;#39;) const zbc = new ZBClient() const handler = (job, complete) =&amp;gt; complete.success() zbc.createWorker(null, &amp;#39;get-customer&amp;#39;, handler, { debug: false, failWorkflowOnException: false, maxJobsToActivate: 32, onConnectionErrorHandler: () =&amp;gt; console.</description>
    </item>
    
    <item>
      <title>Writing Type-Safe Workers</title>
      <link>http://example.org/zbworker/typesafety/</link>
      <pubDate>Sat, 26 Oct 2019 17:01:15 +1000</pubDate>
      
      <guid>http://example.org/zbworker/typesafety/</guid>
      <description>This section only applies if you are using TypeScript
The job parameter that is passed to your worker handler is, by default, partially typed.
The metadata from the broker is strongly typed, but the customHeaders and variables are typed as any.
The argument that you pass to the complete.success() function is also typed as object.
You can provide explicit type information for these fields to provide greater type-safety and Intellisense support in your IDE.</description>
    </item>
    
  </channel>
</rss>